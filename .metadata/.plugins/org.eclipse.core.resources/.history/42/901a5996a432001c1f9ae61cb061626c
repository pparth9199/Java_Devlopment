package polynomial;

import java.util.function.Function;

/**
 * This represents an empty node of the generic list implementation. This class
 * is package-private to hide its implementation to others outside of the
 * ListAdt implementation.
 * 
 * @param <Monomials> the type of element in this node
 */
class PolyEmptyNode<Monomials> implements PolyListAdtNode<Monomials> {
  @Override
  public int count() {
    return 0;
  }

  @Override
  public PolyListAdtNode<Monomials> addFront(Monomials object) {
    return new PolyElementNode<>(object, this);
  }

  @Override
  public PolyListAdtNode<Monomials> addBack(Monomials object) {
    return addFront(object);
  }

  @Override
  public PolyListAdtNode<Monomials> add(int index, Monomials object) throws IllegalArgumentException {
    if (index == 0) {
      return addFront(object);
    }
    throw new IllegalArgumentException("Invalid index to add an element");
  }

  @Override
  public PolyListAdtNode<Monomials> remove(Monomials object) {
    return this; // cannot remove from nothing!
  }

  @Override
  public Monomials get(int index) throws IllegalArgumentException {
    throw new IllegalArgumentException("Invalid index to get an element");
  }

  @Override
  public <R> PolyListAdtNode<R> map(Function<Monomials, R> converter) {
    return new PolyEmptyNode<>();
  }

  @Override
  public String toString() {
    return "";
  }
}
