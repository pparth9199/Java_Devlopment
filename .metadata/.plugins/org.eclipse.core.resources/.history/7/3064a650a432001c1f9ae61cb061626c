package polynomial;

import java.util.function.Function;

/**
 * This is a non-empty node in a generic list. It contains the object data and
 * the rest of the list. This class is package-private to hide its
 * implementation to others outside of the ListAdt implementation.
 * 
 * @param <Monomial> the type of the element in the list
 */
class PolyElementNode<Monomial> implements PolyListAdtNode<Monomial> {
  private Monomial object;
  private PolyListAdtNode<Monomial> rest;

  /**
   * Constructor.
   * 
   * @param p    the element at this node.
   * @param rest the rest of the list
   */
  public PolyElementNode(Monomial p, PolyListAdtNode<Monomial> rest) {
    this.object = p;
    this.rest = rest;
  }

  @Override
  public int count() {
    return 1 + this.rest.count();
  }

  @Override
  public PolyListAdtNode<Monomial> addFront(Monomial object) {
    return new PolyElementNode<>(object, this);
  }

  @Override
  public PolyListAdtNode<Monomial> addBack(Monomial object) {
    this.rest = this.rest.addBack(object);
    return this;
  }

  @Override
  public PolyListAdtNode<Monomial> add(int index, Monomial object) {
    if (index == 0) {
      return addFront(object);
    } else {
      this.rest = this.rest.add(index - 1, object);
      return this;
    }
  }

  @Override
  public PolyListAdtNode<Monomial> remove(Monomial object) {
    if (this.object.equals(object)) {
      return this.rest;
    } else {
      this.rest = this.rest.remove(object);
      return this;
    }
  }

  @Override
  public Monomial get(int index) throws IllegalArgumentException {
    if (index == 0) {
      return this.object;
    }
    return this.rest.get(index - 1);
  }

  @Override
  public <R> PolyListAdtNode<R> map(Function<Monomial, R> converter) {
    /*
     * Starting from this list of T, the resulting list of type R is an element that
     * contains this data converted to T, followed by the rest of the converted list
     */
    return new PolyElementNode<>(converter.apply(this.object), this.rest.map(converter));
  }

  @Override
  public String toString() {
    String objstring = this.object.toString();
    String rest = this.rest.toString();
    if (rest.length() > 0) {
      return objstring + " " + rest;
    } else {
      return objstring;
    }
  }
}
