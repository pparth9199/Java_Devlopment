package polynomial;

/**
 * This class represents an element node in the list adt implementation.
 */
public class PolynomialListADTElementNode implements PolynomialADTNode {
  private Monomial polynomial;
  private PolynomialADTNode rest;

  public PolynomialListADTElementNode(Monomial p, PolynomialADTNode rest) {
    this.polynomial = p;
    this.rest = rest;
  }

  @Override
  public int count() {
    return 1 + this.rest.count();
  }

  @Override
  public PolynomialADTNode addFront(Monomial polynomial) {
    return new PolynomialListADTElementNode(polynomial, this);
  }

  @Override
  public PolynomialADTNode addBack(Monomial polynomial) {
    this.rest = this.rest.addBack(polynomial);
    return this;
  }

  @Override
  public PolynomialADTNode add(int index, Monomial polynomial) {
    if (index == 0) {
      return addFront(polynomial);
    } else {
      this.rest = this.rest.add(index - 1, polynomial);
      return this;
    }
  }

  @Override
  public PolynomialADTNode remove(Monomial polynomial) {
    if (this.polynomial.equals(polynomial)) {
      return this.rest;
    } else {
      this.rest = this.rest.remove(polynomial);
      return this;
    }
  }

  @Override
  public Monomial get(int index) throws IllegalArgumentException {
    if (index == 0) {
      return this.polynomial;
    }

    return this.rest.get(index - 1);
  }

  @Override
  public String toString() {
    String returnString = this.polynomial.toString();
    if (this.polynomial.getCoefficient() > 0) {
      returnString = "+" + returnString;
    }
    return returnString + " " + this.rest.toString();
  }
}